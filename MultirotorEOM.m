function dx_vecdt = MultirotorEOM()

% MultirotorEOM.m
%
% For deriving the dynamic EOMs of a multirotor aircraft adopted from
% Nazmus Sakib'sdissertation. This script symbolically finds the EOMs based
% on Eqn. 3.4 in the dissertation. This EOM derivation includes aerodynamic
% forces, moments and gyroscopic moments. Terms can be omitted to make the
% kinematic and dynamic EOMs simpler.

%%%OUTPUT%%%
% dx_vecdt: The 12 nonlinear EOMs

syms x y z phi_r theta_r psi_r u v w p q r u_T u_phi u_theta u_psi Ixx Iyy ...
    Izz Ixy Iyz Izx m g real

% Basis vectors in 3D
e1 = [1;0;0]; e2 = [0;1;0]; e3 = [0;0;1];

%Diagonal inertia matrix, kg-m^2
Inertia = [Ixx, -Ixy, -Izx; -Ixy, Iyy, -Iyz; -Izx, -Iyz, Izz]; 

%State vectors
s_vec = [x; y; z]; %Position vector of FB w.r.t. FI, m
Theta_vec = [phi_r; theta_r; psi_r]; %Rotation of FB w.r.t. FI, rad
v_vec = [u; v; w]; %Velocity in FB, m/s
omega_vec = [p; q; r]; %FB angular rates, rad/s

x_vec = [s_vec; Theta_vec; v_vec; omega_vec];  

%Rotation matrix and attitude kinematic equations
RIB = expm(psi_r*skew_convert(e3))*expm(theta_r*skew_convert(e2))*...
    expm(phi_r*skew_convert(e1));
LIB = [1, sin(phi_r)*tan(theta_r), cos(phi_r)*tan(theta_r);
    0, cos(phi_r), -sin(phi_r);
    0, sin(phi_r)/cos(theta_r), cos(phi_r)/cos(theta_r)];

%Aerodynamic forces and moments, set to 0 for now
F_aero = 0; M_aero = 0;

%Propulsive forces and moments, these are generated by the inputs to the
%system
F_prop = u_T*e3; %Force along kb axis 
M_prop = u_phi*e1 + u_theta*e2 +  u_psi*e3; %Roll, pitch, yaw in ib, jb, kb

%Input vector, assuming actuators are controlled directly (Propulsive force
%and moments are the inputs controlling the UAV directly)
u_vec = [F_prop; M_prop]; 

%Gravity and gyroscopic moment (Gyro forces assumed to be 0 for now)
F_gravity = RIB'*(m*g*e3);
M_gyro = 0;

% Sum of forces and moments
Force = F_gravity + F_aero + F_prop;
Moment = M_aero + M_prop + M_gyro;

% KINEMATIC EQUATIONS %%%
ds_vecdt = RIB*v_vec;
dTheta_vecdt = LIB*omega_vec;
 
% DYNAMIC EQUATIONS %%%
dv_vecdt = (1/m)*(cross(m*v_vec,omega_vec) + Force);
domega_vecdt = inv(Inertia)*(cross(Inertia*omega_vec,omega_vec) + Moment);

%Form the 12 state EOM of the UAV
dx_vecdt = [ds_vecdt; dTheta_vecdt; dv_vecdt; domega_vecdt];
dx_vecdt