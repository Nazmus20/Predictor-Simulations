function [predicted_states_nonlinear, CLTF_DT] = ...
    SmithPredictor(sysCT, Sim, available_states, Klqr)

% SmithPredictor.m
%
% Smith Predictor simulation

%%%INPUTS%%%
% sysCT: The continuous time (CT) system of the UAV
% Klqr: The LQR controller gain
% Sim.t_vec: Time_vector of the simulation [s]
% x_vec0: Initial states for the simulation to start. The UAV is assumed to
% start from its steady-states
% ref_vec: The actual reference vector without any delay
% in_delDT: The value of the delay in the outgoing signal from the
% groundstation to the UAV, seconds
% out_delDT: The value of the delay in the incoming signal from the UAV to
% the groundstation, seconds
% uSS: Steady state input values. As the simulation starts from
% steady-state these are also the initial values of the input thrusts and
% torques
% isLinear: Boolean. Should the linear or nonlinear model be used to
% generate the actual output

%%%OUTPUTS%%%
% predicted_states: The output o fthe Smith's Predictor
% u_actual: The input thrust and torque generated by the controller for the
% system

%Obtain the closed-loop transfer function (CLTF) with the LQR controller by
%constructing the controller block diagram. The CLTF is required to 
%simulate the Smith's predictor. 

%Specify the inputs to the system and the output
sysCT.InputName = {'u_T', 'u_phi', 'u_theta', 'u_psi'};
sysCT.OutputName = {'y'};
%Create the summing junction: error = reference - output, 12 elements
sum1 = sumblk('e = r - y', 12);
%Convert the LQR gain block to state-space form
LQRSS = ss(Klqr);
LQRSS.InputName = {'e'}; LQRSS.OutputName = {'u_T', 'u_phi', ...
    'u_theta', 'u_psi'};
%Complete the CLTF block diagram, 'r' is the input to the CLTF and 'y' is 
%its output
CLTF = connect(sysCT, LQRSS, sum1, 'r' , 'y');

%Convert it to Discrete Time (DT)
CLTF_DT = c2d(CLTF, Sim.Ts, 'zoh');

%Obtain the estimated output of Smith Predictor when there is delay 
states = lsim(CLTF_DT, Sim.del_des_state, Sim.t_vec, Sim.initial_state);

%Since the output is affected by another delay (incoming delay) add another
%delay, in_del, to the estimated states
delayed_states = addDelay(Sim.t_vec, states', Sim.in_del, Sim.initial_state);

%Obtain the estimated output of Smith Predictor when there is no delay
undelayed_states = lsim(CLTF_DT, Sim.des_state, Sim.t_vec, Sim.initial_state);

%Predited states of the nonlinear delayed system 
predicted_states_nonlinear = available_states + ...
    (undelayed_states' - delayed_states);